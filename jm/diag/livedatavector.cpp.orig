#include "livedatavector.hpp"

namespace JM
{
namespace Diag
{
LiveDataVector::LiveDataVector()
    : _showIndexes()
    , _showPositions()
    , _enabledIndexes()
    , _currentEnabledIndex(-1)
    , _enabledSize(0)
    , _showSize(0)
    , _mutex()
{

}

LiveDataVector::~LiveDataVector()
{

}

void LiveDataVector::push_back(const LiveDataPtr &ptr)
{
    boost::unique_lock<boost::mutex> lock(_mutex);
    _vector.push_back(ptr);
    if (ptr->enabled())
    {
        ++_enabledSize;
        if (ptr->showed())
        {
            ++_showSize;
        }
    }
}

	boost::int32_t LiveDataVector::nextShowedIndex()
	{
		boost::unique_lock<boost::mutex> lock(_mutex);
			if (_showIndexes.size() == 0)
				return -1;

			std::size_t size = _showIndexes.size();
			boost::int32_t ret = _showIndexes[_currentEnabledIndex];
			++(_currentEnabledIndex);

			if ((std::size_t)_currentEnabledIndex > (size - 1))
				_currentEnabledIndex = 0;
			return ret;
		}
		return -1;
	}

}
}